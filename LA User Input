#include <ctype.h>

#include <stdbool.h>

#include <stdio.h>

#include <stdlib.h>

#include <string.h>



#define MAX_LENGTH 100

#define MAX_KEYWORDS 50



// Array to store keywords read from file

char keywords[MAX_KEYWORDS][MAX_LENGTH];

int keywordCount = 0;



// Function to load keywords from file

void loadKeywords(const char* filename) {

    FILE* file = fopen(filename, "r");

    if (file == NULL) {

        printf("Error: Could not open keywords file.\n");

        exit(1);

    }



    while (fgets(keywords[keywordCount], MAX_LENGTH, file)) {

        // Remove newline character from the end of each keyword

        keywords[keywordCount][strcspn(keywords[keywordCount], "\n")] = 0;

        keywordCount++;

    }

    fclose(file);

}



// Checks if a character is a delimiter

bool isDelimiter(char chr) {

    return (chr == ' ' || chr == '+' || chr == '-' || chr == '*'

            || chr == '/' || chr == ',' || chr == ';' || chr == '%'

            || chr == '>' || chr == '<' || chr == '=' || chr == '('

            || chr == ')' || chr == '[' || chr == ']' || chr == '{'

            || chr == '}');

}



// Checks if a character is an operator

bool isOperator(char chr) {

    return (chr == '+' || chr == '-' || chr == '*' || chr == '/'

            || chr == '>' || chr == '<' || chr == '=');

}



// Checks if a string is a valid identifier

bool isValidIdentifier(char* str) {

    return (str[0] != '0' && str[0] != '1' && str[0] != '2'

            && str[0] != '3' && str[0] != '4' && str[0] != '5'

            && str[0] != '6' && str[0] != '7' && str[0] != '8'

            && str[0] != '9' && !isDelimiter(str[0]));

}



// Checks if a string is a keyword

bool isKeyword(char* str) {

    for (int i = 0; i < keywordCount; i++) {

        if (strcmp(str, keywords[i]) == 0) {

            return true;

        }

    }

    return false;

}



// Checks if a string is an integer

bool isInteger(char* str) {

    if (str == NULL || *str == '\0') {

        return false;

    }

    int i = 0;

    while (isdigit(str[i])) {

        i++;

    }

    return str[i] == '\0';

}



// Trims a substring from a given string's start and end position

char* getSubstring(char* str, int start, int end) {

    int subLength = end - start + 1;

    char* subStr = (char*)malloc((subLength + 1) * sizeof(char));

    strncpy(subStr, str + start, subLength);

    subStr[subLength] = '\0';

    return subStr;

}



// Parses and analyzes the input

void lexicalAnalyzer(char* input) {

    int left = 0, right = 0;

    int len = strlen(input);



    while (right <= len && left <= right) {

        if (!isDelimiter(input[right]))

            right++;



        if (isDelimiter(input[right]) && left == right) {

            if (isOperator(input[right]))

                printf("Token: Operator, Value: %c\n", input[right]);



            right++;

            left = right;

        } else if (isDelimiter(input[right]) && left != right

                   || (right == len && left != right)) {

            char* subStr = getSubstring(input, left, right - 1);



            if (isKeyword(subStr))

                printf("Token: Keyword, Value: %s\n", subStr);



            else if (isInteger(subStr))

                printf("Token: Integer, Value: %s\n", subStr);



            else if (isValidIdentifier(subStr) && !isDelimiter(input[right - 1]))

                printf("Token: Identifier, Value: %s\n", subStr);



            else if (!isValidIdentifier(subStr) && !isDelimiter(input[right - 1]))

                printf("Token: Unidentified, Value: %s\n", subStr);



            free(subStr);

            left = right;

        }

    }

}



// Main function

int main() {

    // Load keywords from file

    loadKeywords("keywords.txt");



    // Get input expression from user

    char input[MAX_LENGTH];

    printf("Enter an expression to analyze: ");

    fgets(input, MAX_LENGTH, stdin);

    input[strcspn(input, "\n")] = 0;  // Remove newline character from input



    printf("\nAnalyzing Expression \"%s\":\n", input);

    lexicalAnalyzer(input);



    return 0;

}


keywords.txt-
auto

break

case

char

const

continue

default

do

double

else

enum

extern

float

for

goto

if

int

long

register

return

short

signed

sizeof

static

struct

switch

typedef

union

unsigned

void

volatile

while
