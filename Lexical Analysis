#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>

#define MAX_KEYWORDS 5

// List of keywords for testing
const char *keywords[MAX_KEYWORDS] = {"int", "float", "if", "else", "return"};

// Function to check if a string is a keyword
int isKeyword(const char *str) {
    for (int i = 0; i < MAX_KEYWORDS; i++) {
        if (strcmp(str, keywords[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

// Function to check if a string is an identifier
int isIdentifier(const char *str) {
    if (!isalpha(str[0])) {
        return 0;
    }
    for (int i = 1; str[i] != '\0'; i++) {
        if (!isalnum(str[i])) {
            return 0;
        }
    }
    return 1;
}

// Function to check if a string is an operator
int isOperator(const char *str) {
    const char *operators[] = {"+", "-", "*", "/", "=", "==", "<", ">", "!=", "&&", "||"};
    int numOperators = sizeof(operators) / sizeof(operators[0]);
    for (int i = 0; i < numOperators; i++) {
        if (strcmp(str, operators[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

// Function to check if a character is a punctuation mark
int isPunctuation(const char *str) {
    return strlen(str) == 1 && strchr(".,;:(){}[]", str[0]) != NULL;
}

// Function to check if a string is a number
int isNumber(const char *str) {
    for (int i = 0; str[i] != '\0'; i++) {
        if (!isdigit(str[i])) {
            return 0;
        }
    }
    return 1;
}

// Function to classify the input token
void classifyToken(const char *input) {
    if (isKeyword(input)) {
        printf("Keyword: '%s'\n", input);
    } else if (isIdentifier(input)) {
        printf("Identifier: '%s'\n", input);
    } else if (isOperator(input)) {
        printf("Operator: '%s'\n", input);
    } else if (isPunctuation(input)) {
        printf("Punctuation: '%s'\n", input);
    } else if (isNumber(input)) {
        printf("Number: '%s'\n", input);
    } else {
        printf("Unknown token: '%s'\n", input);
    }
}

int main() {
    FILE *file = fopen("tokens.txt", "r");
    if (file == NULL) {
        printf("Error: Could not open file 'tokens.txt'\n");
        return 1;
    }

    char input[100];

    printf("Reading tokens from file 'tokens.txt':\n");

    // Read each token from the file
    while (fscanf(file, "%s", input) == 1) {
        // Classify the input token
        classifyToken(input);
    }

    printf("End of file reached. Program terminated.\n");
    fclose(file);
    return 0;
}
