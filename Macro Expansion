#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_LINES 100
#define MAX_PARAMS 10
#define MAX_NAME_LEN 50
#define MAX_CODE_LEN 100

// Structures for MDT, MNT, and PNTAB
struct MDT {
    int index;
    char definition[MAX_CODE_LEN];
} MDT[MAX_LINES];
int mdt_count = 0;

struct MNT {
    char name[MAX_NAME_LEN];
    int mdt_index;
} MNT[MAX_LINES];
int mnt_count = 0;

struct PNTAB {
    char name[MAX_NAME_LEN];
    char parameters[MAX_PARAMS][MAX_NAME_LEN];
    int param_count;
} PNTAB[MAX_LINES];
int pntab_count = 0;

// Function to read tables from file
void read_tables() {
    FILE *file = fopen("macros.txt", "r");
    if (file == NULL) {
        printf("Error: Could not open macros.txt\n");
        return;
    }

    char line[MAX_CODE_LEN];
    int section = 0;

    while (fgets(line, sizeof(line), file)) {
        if (strstr(line, "Macro Definition Table")) section = 1;
        else if (strstr(line, "Macro Name Table")) section = 2;
        else if (strstr(line, "Parameter Name Table")) section = 3;
        else if (section == 1 && strstr(line, "MEND") == NULL) { // MDT
            int index;
            char definition[MAX_CODE_LEN];
            sscanf(line, "%d %[^\n]s", &index, definition);
            MDT[mdt_count].index = index;
            strcpy(MDT[mdt_count++].definition, definition);
        } else if (section == 2) { // MNT
            struct MNT entry;
            sscanf(line, "%s %d", entry.name, &entry.mdt_index);
            MNT[mnt_count++] = entry;
        } else if (section == 3) { // PNTAB
            struct PNTAB entry;
            sscanf(line, "%s %[^\n]s", entry.name, line);
            entry.param_count = 0;
            char *token = strtok(line, " ");
            while (token != NULL) {
                strcpy(entry.parameters[entry.param_count++], token);
                token = strtok(NULL, " ");
            }
            PNTAB[pntab_count++] = entry;
        }
    }

    fclose(file);
}

// Function to find macro index in MNT
int find_macro(char *name) {
    for (int i = 0; i < mnt_count; i++) {
        if (strcmp(MNT[i].name, name) == 0) return MNT[i].mdt_index;
    }
    return -1;
}

// Function to expand a macro and write to output file
void expand_macro(FILE *output, char *name, char args[][MAX_NAME_LEN], int arg_count) {
    int mdt_index = find_macro(name);
    if (mdt_index == -1) return;

    int param_index = -1;
    for (int i = 0; i < pntab_count; i++) {
        if (strcmp(PNTAB[i].name, name) == 0) {
            param_index = i;
            break;
        }
    }

    for (int i = mdt_index + 1; i < mdt_count && strstr(MDT[i].definition, "MEND") == NULL; i++) {
        char line[MAX_CODE_LEN];
        strcpy(line, MDT[i].definition);

        for (int j = 0; j < PNTAB[param_index].param_count; j++) {
            char *pos = strstr(line, PNTAB[param_index].parameters[j]);
            if (pos != NULL) {
                *pos = '\0';
                strcat(line, args[j]);
                strcat(line, pos + strlen(PNTAB[param_index].parameters[j]));
            }
        }

        fprintf(output, "%s\n", line);
    }
}

int main() {
    read_tables();

    FILE *output = fopen("expanded_code.txt", "w");
    if (output == NULL) {
        printf("Error: Could not open output file\n");
        return 1;
    }

    // Sample macro calls (for demonstration purposes)
    char macro_calls[][MAX_CODE_LEN] = {
        "ADD NUM1 NUM2",
        "MULT NUM3 NUM4",
        "SUBTRACT NUM5 NUM6"
    };

    int num_calls = sizeof(macro_calls) / sizeof(macro_calls[0]);

    for (int i = 0; i < num_calls; i++) {
        char name[MAX_NAME_LEN], args[MAX_PARAMS][MAX_NAME_LEN];
        int arg_count = 0;

        char *token = strtok(macro_calls[i], " ");
        strcpy(name, token);
        token = strtok(NULL, " ");
        
        while (token != NULL) {
            strcpy(args[arg_count++], token);
            token = strtok(NULL, " ");
        }

        expand_macro(output, name, args, arg_count);
    }

    fclose(output);

    printf("Macro expansion complete. Check 'expanded_code.txt' for output.\n");

    return 0;
}


macros.txt
Macro Definition Table (MDT):
0         MACRO ADD &ARG1 &ARG2
1         LDA &ARG1
2         ADD &ARG2
3         STA RESULT
4         MEND
5         MACRO MULT &ARG1 &ARG2
6         MUL &ARG1
7         MUL &ARG2
8         STA RESULT
9         MEND
10        MACRO SUBTRACT &ARG1 &ARG2
11        LDA &ARG1
12        SUB &ARG2
13        STA RESULT
14        MEND

Macro Name Table (MNT):
Name       MDT Index
ADD        0
MULT       5
SUBTRACT   10

Parameter Name Table (PNTAB):
Macro Name Parameters
ADD        &ARG1 &ARG2 
MULT       &ARG1 &ARG2 
SUBTRACT   &ARG1 &ARG2
